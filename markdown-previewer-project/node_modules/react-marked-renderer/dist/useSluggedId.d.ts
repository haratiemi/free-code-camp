import { marked, Slugger } from "marked";
import { ReactElement, ReactNode } from "react";
export interface TokensTextOptions {
    /**
     * The current depth which is used with the `maxDepth` parameter.
     *
     * @defaultValue `0`
     */
    depth?: number;
    /**
     * An optional max depth to recursively traverse in the list of {@link Token}.
     * Defaults to traversing everything.
     *
     * @defaultValue `-1`
     */
    maxDepth?: number;
}
/**
 * A util to get the text content from the tokens without using the `token.raw`.
 *
 * @param tokens - The list of {@link Token} to parse for text.
 * @param options - The {@link TokensTextOptions}
 * @returns the text content for the list of tokens
 */
export declare function getTokensText(tokens: readonly marked.Token[], { depth, maxDepth }?: TokensTextOptions): string;
/**
 * This is mostly an internal hook to get the current slugger, but it can be
 * used if the {@link useSluggedId} does not work for your use-case and you need
 * access to the full `Slugger`
 */
export declare function useMarkdownSlugger(): Slugger;
/**
 * This is a reasonable default for generating unique ids for elements in the
 * {@link Markdown} component.
 *
 * @example
 * Simple Example
 * ```tsx
 * const text = "This is some heading text";
 * const id = useSluggedId(text);
 * // "this-is-some-heading-text"
 * ```
 *
 * @example
 * Using Tokens
 * ```tsx
 * const tokens: readonly Token[] = [
 *   { type: "text", text: "Some content", raw: "Some content" },
 *   {
 *     type: "link",
 *     text: "Link Text",
 *     raw: "[Link Text](https://example.com)",
 *     href: "https://example.com",
 *     title: "",
 *     tokens: [
 *       {
 *         type: "text",
 *         raw: "Link Text",
 *         text: "Link Text",
 *       },
 *     ],
 *   },
 * ];
 * const id = useSluggedId(tokens);
 * // "some-content-link-text"
 * ```
 *
 * @param textOrTokens - The text or list of {@link marked.Token} to convert to
 * a unique id
 * @returns a unique id that can be applied to a component
 */
export declare function useSluggedId(textOrTokens: string | readonly marked.Token[]): string;
/** @internal */
export interface MarkdownSluggerProviderProps {
    children: ReactNode;
    slugger: Slugger;
}
/** @internal */
export declare function MarkdownSluggerProvider({ children, slugger, }: MarkdownSluggerProviderProps): ReactElement;
