import type { marked } from "marked";
import type { ComponentType, ReactElement, ReactNode } from "react";
export interface TextRendererProps extends marked.Tokens.Text {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Text} by
 * rendering:
 *
 * ```tsx
 * <>{children || raw}</>
 * ```
 *
 * @remarks This defaults to using `raw` instead of the sanitized `text` because
 * React already handles the sanitization. If the `text` is used, the generated
 * text would display html entities instead of the correct string.
 */
export declare function TextRenderer({ raw, children, }: TextRendererProps): ReactElement;
export interface EmRendererProps extends marked.Tokens.Em {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Em} by rendering:
 *
 * ```tsx
 * <em>{children}</em>
 * ```
 */
export declare function EmRenderer({ children }: EmRendererProps): ReactElement;
export interface DelRendererProps extends marked.Tokens.Del {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Del} by rendering:
 *
 * ```tsx
 * <del>{children}</del>
 * ```
 */
export declare function DelRenderer({ children }: DelRendererProps): ReactElement;
export interface StrongRendererProps extends marked.Tokens.Strong {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Strong} by
 * rendering:
 *
 * ```tsx
 * <strong>{children}</strong>
 * ```
 */
export declare function StrongRenderer({ children, }: StrongRendererProps): ReactElement;
export interface HeadingRendererProps extends marked.Tokens.Heading {
    depth: 1 | 2 | 3 | 4 | 5 | 6;
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Heading} that will
 * render one of the following based on the `depth`:
 *
 * - `<h1 id={sluggedId}>{children}</h1>`
 * - `<h2 id={sluggedId}>{children}</h2>`
 * - `<h3 id={sluggedId}>{children}</h3>`
 * - `<h4 id={sluggedId}>{children}</h4>`
 * - `<h5 id={sluggedId}>{children}</h5>`
 * - `<h6 id={sluggedId}>{children}</h6>`
 *
 * @see {@link useSluggedId}
 */
export declare function HeadingRenderer({ depth, tokens, children, }: HeadingRendererProps): ReactElement;
export interface ParagraphRendererProps extends marked.Tokens.Paragraph {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Paragraph} by
 * rendering:
 *
 * ```tsx
 * <p>{children}</p>
 * ```
 */
export declare function ParagraphRenderer({ children, }: ParagraphRendererProps): ReactElement;
export interface BlockquoteRendererProps extends marked.Tokens.Blockquote {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Blockquote} by
 * rendering:
 *
 * ```tsx
 * <blockquote>{children}</blockquote>
 * ```
 */
export declare function BlockquoteRenderer({ children, }: BlockquoteRendererProps): ReactElement;
export interface LinkRendererProps extends marked.Tokens.Link {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.Link} by
 * rendering:
 *
 * ```tsx
 * <a href={href}>{children}</href>
 * ```
 */
export declare function LinkRenderer({ href, title, children, }: LinkRendererProps): ReactElement;
/**
 * These types of renderers normally render simple text, but can contain other
 * elements.
 */
export interface TextRenderers {
    /** @see {@link EmRenderer} for default implementation */
    em: ComponentType<EmRendererProps>;
    /** @see {@link DelRenderer} for default implementation */
    del: ComponentType<DelRendererProps>;
    /** @see {@link LinkRenderer} for default implementation */
    link: ComponentType<LinkRendererProps>;
    /** @see {@link TextRenderer} for default implementation */
    text: ComponentType<TextRendererProps>;
    /** @see {@link StrongRenderer} for default implementation */
    strong: ComponentType<StrongRendererProps>;
    /** @see {@link HeadingRenderer} for default implementation */
    heading: ComponentType<HeadingRendererProps>;
    /** @see {@link ParagraphRenderer} for default implementation */
    paragraph: ComponentType<ParagraphRendererProps>;
    /** @see {@link BlockquoteRenderer} for default implementation */
    blockquote: ComponentType<BlockquoteRendererProps>;
}
export declare const TEXT_RENDERERS: TextRenderers;
