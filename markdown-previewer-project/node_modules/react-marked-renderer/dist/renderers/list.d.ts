import type { marked } from "marked";
import type { ComponentType, ReactElement, ReactNode } from "react";
export interface ListRendererProps extends marked.Tokens.List {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.List} by
 * rendering:
 *
 * ```tsx
 * const Component = ordered ? "ol" : "ul";
 *
 * <Component>{children}</Component>;
 * ```
 */
export declare function ListRenderer({ ordered, children, }: ListRendererProps): ReactElement;
export interface ListItemRendererProps extends Omit<marked.Tokens.ListItem, "checked" | "task"> {
    children: ReactNode;
}
/**
 * The default implementation for rendering the {@link Tokens.List} by
 * rendering:
 *
 * ```tsx
 * <li>{children}</li>
 * ```
 */
export declare function ListItemRenderer({ children, }: ListItemRendererProps): ReactElement;
export interface TaskRendererProps extends ListItemRendererProps {
    defaultChecked: boolean;
}
/**
 * The default implementation for rendering the {@link Tokens.List} by
 * rendering:
 *
 * ```tsx
 * const id = useSluggedId(`${getTokensText(props.tokens)}-task`);
 *
 * <li {...props}>
 *   <input id={id} type="checkbox" defaultChecked={defaultChecked} />
 *   <label htmlFor={id}>{children}</label>
 * </li>
 * ```
 *
 * @remarks You'll most likely need to implement a custom renderer for this
 * since the default styles aren't very pretty.
 */
export declare function TaskRenderer({ defaultChecked, children, ...props }: TaskRendererProps): ReactElement;
/**
 * These types of renderers are used for rendering lists.
 */
export interface ListRenderers {
    /** @see {@link ListRenderer} for default implementation */
    list: ComponentType<ListRendererProps>;
    /** @see {@link ListItemRenderer} for default implementation */
    listitem: ComponentType<ListItemRendererProps>;
    /** @see {@link TaskRenderer} for default implementation */
    task: ComponentType<TaskRendererProps>;
}
export declare const LIST_RENDERERS: ListRenderers;
